/* DESCRIPTION
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0

We define an hourglass in to be a subset of values with indices falling 
in this pattern in 's graphical representation:

a b c
  d
e f g

There are  hourglasses in, and an hourglass sum is the sum of an hourglass' 
values. Calculate the hourglass sum for every hourglass in, then print the 
maximum hourglass sum.
DESCRIPTION */ 

static int hourglassSum(int[][] arr) {
        int rows = arr.length;
        int columns = arr[0].length;

        int max = Integer.MIN_VALUE; // Initially initialized to min value so we can initialize the first 
                                     // sum to max to start the comparisons.

        /*
          Run through a for loop that goes through each hourglass that is contained in the 2D array and takes it sum. The
          takes it sum. The sum is then compared to the max value. At the end of the for loop, the max value will be 
          left and is returned.
        */
        for(int i = 0; i < rows - 2; i++){                // rows and columns - 2 so we don't go out of bounds                                             
            for(int j = 0; j < columns - 2; j++){         // of the indices and get every hourglass
                int sum = arr[i][j] + arr[i][j+1] + arr[i][j+2] +           // First row
                                    arr[i+1][j+1] +                         // Second Row - Middle Value
                          arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2];      // Third Row
                if(sum > max)
                    max = sum;
            }
        }
        return max;
    }
